
import express, { urlencoded } from 'express';
import compression from 'compression';
import cors from 'cors';
import 'colors';
import morgan from 'morgan';
import helmet from 'helmet';
import http from 'http';
import jwt from 'jsonwebtoken';
import fetch from 'node-fetch';

// Environmental variables
const host = process.env.HOST || '192.168.2.149';
const port = process.env.PORT || '2000';
const JWT_SECRET = process.env.SECRET;
const TOKEN_EXPIRATION = process.env.EXPIRES || '30d'; // Default to 30 days
const today = new Date();

// Server Middlewares
const app = express();
app.use(compression());
app.use(morgan('tiny'));
app.use(cors());
app.use(helmet());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// API Routes
app.get('/', async (req, res) => {
    res.status(200).json({ msg: `Unique Force server is Healthy ${today.getDate()}/${today.getMonth()}/${today.getFullYear()}` });
});

// Fetch users from GitHub raw content
const fetchUsers = async () => {
    try {
        const response = await fetch('https://raw.githubusercontent.com/chromecruzer/unique-native-app/main/users.json');
        const users = await response.json();
        console.log(users);
        return users;
    } catch (error) {
        console.error('Failed to fetch users:', error);
        throw new Error('Failed to fetch users');
    }
};

// Middleware to check JWT token
app.use((req, res, next) => {
    const authHeader = req.headers['authorization'] || req.headers['Authorization'];
    if (!authHeader) {
        console.log('No Authorization header');
        return res.status(403).json({ error: 'No token provided' });
    }

    const token = authHeader.startsWith('Bearer ') ? authHeader.split(' ')[1] : authHeader;

    if (!token) {
        console.log('No token extracted from Authorization header');
        return res.status(403).json({ error: 'No token provided' });
    }

    jwt.verify(token, JWT_SECRET, (err, decoded) => {
        if (err) {
            console.log('Token verification error:', err.message);
            return res.status(500).json({ error: 'Failed to authenticate token' });
        }

        req.userId = decoded.userid;
        next();
    });
});

// Endpoint for user login
app.post('/login', async (req, res) => {
    const { userid, pwd } = req.body;
    console.log(`From the client ${userid} -- ${pwd}`.blue);

    try {
        const users = await fetchUsers();
        const user = users.find(u => u.userid === userid && u.pwd === pwd);

        if (user) {
            const token = jwt.sign({ userid }, JWT_SECRET, { expiresIn: TOKEN_EXPIRATION });
            console.log('Generated token:', token);
            return res.json({ token });
        }

        return res.status(401).json({ error: 'Invalid credentials' });
    } catch (error) {
        console.log('Login error:', error.message);
        return res.status(500).json({ error: 'Internal server error' });
    }
});

// Endpoint to fetch JSON data from GitHub raw content
app.get('/data/:filename', async (req, res) => {
    const { filename } = req.params;
    try {
        const response = await fetch(`https://raw.githubusercontent.com/chromecruzer/unique-native-app/main/${filename}.json`);
        const data = await response.json();
        return res.json(data);
    } catch (error) {
        return res.status(500).json({ error: 'Failed to fetch data' });
    }
});

// Create HTTP server
const server = http.createServer(app);

// Start server
server.listen(port, host, () => {
    console.log(`Server is running at http://${host}:${port}`.bgGreen.bgWhite);
});

// Graceful shutdown handling
const gracefulShutdown = () => {
    console.log('Received shutdown signal. Closing server gracefully...');

    server.close((err) => {
        if (err) {
            console.error('Error during server shutdown:', err);
            process.exit(1);
        }

        console.log('Server closed.');
        process.exit(0);
    });

    // If there are ongoing requests, you may want to implement additional logic here
    // to wait for them to complete before shutting down.
};

// Listen for shutdown signals
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);





/// to verify jwt tokens
https://jwt.io/
